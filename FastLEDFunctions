#include <FastLED.h>

#define COLOR_ORDER GRB
#define CHIPSET     WS2812
#define BRIGHTNESS  255
#define FRAMES_PER_SECOND 60

const int numLEDS = 8;
const int ledPin = 10;
bool gReverseDirection = false;

int colorPicker1;
int colorPicker2;
int colorPicker3;
int colorPicker4;

CRGB leds[numLEDS];

unsigned long animationStartMillis[numLEDS];
unsigned long animationDuration[numLEDS];
unsigned long maxBrightnessDuration = 100; // Maximum brightness duration in milliseconds

void setup() 
{

FastLED.addLeds<CHIPSET, ledPin, COLOR_ORDER>(leds, numLEDS).setCorrection( TypicalLEDStrip );
randomSeed(analogRead(0)); // Initialize random seed
FastLED.show(); // Initialize LED with all LEDs off
Serial.begin(9600);
}


void loop() {

  unsigned long currentTime = millis();

colorPicker1 = random(3);
colorPicker2 = random(3);
colorPicker3 = random(3);
colorPicker4 = random(3);

Serial.println(colorPicker1);
Serial.println(colorPicker2);
Serial.println(colorPicker3);
Serial.println(colorPicker4);
electricity();
delay(10);

}

void electricity() {
  // Create a list of random colors
  CRGB colors[3] = {CRGB::White, CRGB::Blue, CRGB::Yellow};

  // Create a list of the LED indices to affect
  int led_indices[4] = {0, 2, 4, 6};

  // Create a list of random fade times
  int fade_times[4];
  for (int i = 0; i < 4; i++) {
    fade_times[i] = random(500, 1000);
  }

  // Set the color and fade time for each LED
  for (int i = 0; i < 4; i++) {
    int led_index = led_indices[i];

    CRGB color = colors[random(3)];
    int fade_time = fade_times[i];

    leds[led_index] = color;

    // Fade out the LED over the specified fade time
    for (int brightness = 255; brightness >= 0; brightness--) {
      leds[led_index].setRGB(brightness, brightness, brightness);
      FastLED.show();
      delay(fade_time / 255);
    }
  }

  // Update the LED strip
  FastLED.show();
}




/*///////////////////////SOLID WHITE 100ms BLINK

//off
//029
//on
//2370
//off 100



            //solid white max brightness 50ms
            for (int i = 0; i <= numLEDS -1; i++){
                if (i == 0 | i == 2| i == 4 | i == 6){
                leds[i] = CRGB::White; // LED on
                FastLED.show();
                }
            }
            delay(50);
            FastLED.clear();
            FastLED.show();
            delay(1000);

////////////////////////////////////////////////////*/        

////////////////////////////////////////////////////////////////////////////






void sparks() {
  
  CRGB targetColor = CRGB::RoyalBlue;

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      FastLED.show(); 
      }
    }

delay(115);

  for (int brightness = 0; brightness <= 255; brightness++) {
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){    
      leds[i] = targetColor;
      leds[i].fadeToBlackBy(255 - brightness); //fade out
      FastLED.show();
      delay(1157 / 255);
      
      }
     }       
    }
  

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      FastLED.show(); 
       }
    }

delay(077);

    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){    
      leds[i] = targetColor;
      FastLED.show(); 
      }
     }
delay(181);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      FastLED.show(); 
      }
    }
delay(100);
}





void lasers() { //Sound 1
  
  CRGB targetColor = CRGB::DarkOrange;

// fade from off to full color brightness
  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
   
FastLED.show(); 
delay(400);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
    
FastLED.show(); 
delay(809);

  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
    
FastLED.show(); 
delay(485);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
    
FastLED.show(); 
delay(304);
    

  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
FastLED.show(); 
delay(370);    

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
FastLED.show(); 
delay(100);

for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }

FastLED.show(); 
delay(449);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
FastLED.show(); 
delay(10);

}



void airJets() { //Sound 2
  
  CRGB targetColor = CRGB::Cyan;

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
    
FastLED.show(); 
delay(200);


// fade from off to full color brightness
  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
   
FastLED.show(); 
delay(283);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
    
FastLED.show(); 
delay(100);

  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
    
FastLED.show(); 
delay(316);

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
FastLED.show(); 
delay(100);
    

  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
FastLED.show(); 
delay(503);    

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
FastLED.show(); 
delay(100);
    

  for (int brightness = 0; brightness <= 255; brightness++){
    for (int i=0;i <=numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
    leds[i] = targetColor;
    }
      }
  }
FastLED.show(); 
delay(690);    

    for (int i = 0; i <= numLEDS -1; i++){
      if (i == 0 | i == 2| i == 4 | i == 6){
      leds[i] = CRGB::Black;
      }
    }
FastLED.show(); 
delay(100);
}
 

void redFade() { //Sound 3
  // Define the duration of the fade (in milliseconds)
  unsigned long fadeDuration = 800;

  // Number of steps in the fade
  int numSteps = 256;

  // Calculate the time interval between each step
  unsigned long stepInterval = fadeDuration / numSteps;

  for (int brightness = 0; brightness <= 255; brightness++) {
    // Set the LED brightness for odd-numbered LEDs
    for (int i = 0; i <= numLEDS -1; i += 2) {
      leds[i] = CRGB(brightness, 0, 0); // Red with specified brightness
    }

    FastLED.show(); // Display this frame
    delay(stepInterval);
  }

  for (int brightness = 255; brightness >= 0; brightness--) {
    // Set the LED brightness for odd-numbered LEDs
    for (int i = 0; i <= numLEDS -1; i += 2) {
      leds[i] = CRGB(brightness, 0, 0); // Red with specified brightness
    }

    FastLED.show(); // Display this frame
    delay(stepInterval);

      for (int brightness = 0; brightness <= 255; brightness++) {
    // Set the LED brightness for odd-numbered LEDs
    for (int i = 0; i <= numLEDS -1; i += 2) {
      leds[i] = CRGB(brightness, 0, 0); // Red with specified brightness
    }

    FastLED.show(); // Display this frame
    delay(stepInterval);
  }

  for (int brightness = 255; brightness >= 0; brightness--) {
    // Set the LED brightness for odd-numbered LEDs
    for (int i = 0; i <= numLEDS -1; i += 2) {
      leds[i] = CRGB(brightness, 0, 0); // Red with specified brightness
    }

    FastLED.show(); // Display this frame
    delay(stepInterval);
 
  }
  }
}
